# pum.vim
[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = 'InsertEnter'
hook_source = '''
  inoremap <silent><expr> <C-b> ddc#complete_common_string()

  call ddc#custom#patch_global('ui', 'pum')

  call ddc#custom#patch_global(
      \ 'sources', ['around', 'rg', 'copilot', 'file']
      \ )

  call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'ignoreCase': v:true,
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank'],
      \   'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {
      \   'mark': 'A',
      \   'matchers': ['matcher_head', 'matcher_length'],
      \ },
      \ 'cmdline': {
      \   'mark': 'CmdL',
      \   'forceCompletionPattern': '\S/\S*',
      \ },
      \ 'cmdline-history': {
      \   'mark': 'Hist',
      \   'sorters': [],
      \ },
      \ 'rg': {
      \   'mark': 'rg',
      \   'matchers': ['matcher_head', 'matcher_length'],
      \   'minAutoCompleteLength': 4,
      \ },
      \ 'nvim-lsp': {
      \   'mark': 'LSP',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \   'dup': 'force',
      \ },
      \ 'vsnip': {
      \   'mark': 'vs',
      \   'dup': 'keep',
      \ },
      \ 'file': {
      \   'mark': 'F',
      \   'isVolatile': v:true,
      \   'minAutoCompleteLength': 1000,
      \   'forceCompletionPattern': '\S/\S*'
      \ },
      \ 'copilot': {
      \   'mark': 'copilot',
      \   'matchers': [],
      \   'minAutoCompleteLength': 0,
      \   'isVolatile': 'false',
      \ },
      \ })

      call ddc#custom#patch_global('sourceParams', {
              \ 'nvim-lsp': {
              \   'kindLabels': { 'Class': 'c' },
              \   'snippetEngine': denops#callback#register({
              \         body -> vsnip#anonymous(body)
              \   }),
              \   'enableResolveItem': v:true,
              \   'enableAdditionalTextEdit': v:true,
              \   },
              \ })

  call ddc#custom#patch_global('cmdlineSources', {
		    \ ':': ['cmdline-history', 'cmdline', 'around'],
		    \ '@': ['cmdline-history', 'input', 'file', 'around'],
		    \ '>': ['cmdline-history', 'input', 'file', 'around'],
            \ '/': ['around', 'line'],
		    \ '?': ['around', 'line'],
		    \ '-': ['around', 'line'],
		    \ '=': ['input'],
		    \ })

  call ddc#custom#patch_filetype(
          \ ['ruby', 'python', 'sh', 'cs'],
          \ 'sources', has('nvim') ?
          \ ['nvim-lsp', 'vsnip','around', 'file'] :
          \ ['vsnip', 'around', 'file']
          \ )

  " Use pum.vim
  call ddc#custom#patch_global('autoCompleteEvents', [
          \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
          \ 'CmdlineEnter', 'CmdlineChanged',
          \ ])

  inoremap <silent><expr> <TAB>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1, "loop")<CR>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<TAB>' : ddc#map#manual_complete()
  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  inoremap <expr> <C-l>  ddc#map#manual_complete()

  call popup_preview#enable()
  call signature_help#enable()
  call ddc#enable()
'''

hook_add = '''
"nnoremap : <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  " Note: It disables default command line completion!
  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ ddc#map#manual_complete()
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  " Overwrite sources
  " let s:prev_buffer_config = ddc#custom#get_buffer()
  " call ddc#custom#patch_buffer('cmdLineSources',
  "         \ ['cmdline', 'cmdline-history', 'around'])

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
  call ddc#enable()
endfunction

function! CommandlinePost() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
  cunmap <Tab>
endfunction
'''

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_add = '''
  let g:popup_preview_config = {
	    \ 'delay': 30,
        \ 'maxWidth': 100,
        \ 'winblend': 0,
	    \ }
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_add = '''
	let g:signature_help_config = {
        \ 'style': 'full',
        \ 'border': v:true,
        \ }
'''

[[plugins]]
repo = 'Shougo/ddc-source-copilot'
on_source = 'ddc.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
depends = ['ddc-source-vsnip','friendly-snippets']
on_event = 'InsertEnter'
on_source = 'ddc.vim'
hook_add = '''
" Expand
imap <expr> <C-l> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <TAB> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
smap <expr> <TAB> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
let g:vsnip_snippet_dir = expand('~/dotfiles/vim/snippets')
let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'


[[plugins]]
repo = 'rafamadriz/friendly-snippets'

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets', 'context_filetype.vim','ddc.vim']
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# hook_source = '''
#     imap <silent><C-k>     <Plug>(neosnippet_jump_or_expand)
#     smap <silent><C-k>     <Plug>(neosnippet_jump_or_expand)
#     xmap <silent><C-k>     <Plug>(neosnippet_expand_target)
#     let g:neosnippet#enable_snipmate_compatibility = 1
#     let g:neosnippet#enable_completed_snippet = 1
#     let g:neosnippet#expand_word_boundary = 1
#     let g:neosnippet#snippets_directory = '~/.vim/snippets'
#     " if has('conceal')
#     "     set conceallevel=0
#     " endif
# '''


[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

# ui
[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

